buildscript{
    ext{
        sdkRoot = System.getenv("ANDROID_HOME") ?: System.getenv("ANDROID_SDK_ROOT")

        mindustryPath = "com.github.Anuken.Mindustry"
        //the build number that this mod is made for
        mindustryVersion = "v140.4"
        arcVersion =mindustryVersion

        kotlinVersion = "1.6.0"
        jabelVersion = "0.7.0"
        arcModule = { String name ->
            //skip to last submodule
            if(name.contains(':')) name = name.split(':').last()
            return "com.github.Anuken.Arc:$name:$arcVersion"
        }
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}
plugins{
    id 'org.jetbrains.kotlin.jvm' version "$kotlinVersion"
    id "org.jetbrains.kotlin.kapt" version "$kotlinVersion"
}


repositories{
    mavenLocal()
    mavenCentral()
//        google()
    maven{ url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven{ url 'https://jitpack.io' }
}





apply plugin: 'java'
apply plugin: "java-library"
apply plugin: "kotlin"

sourceSets.main.java.srcDirs = ["src/", "$buildDir/generated/sources/annotationProcessor/java/main"]
sourceSets.main.kotlin.srcDirs = ["src/", "$buildDir/generated/sources/annotationProcessor/java/main"]
sourceSets.main.resources.srcDirs = ["assets"]
version '1.0'

kapt{
    javacOptions{
        option("-source", "16")
        option("-target", "1.8")
    }
}

compileJava.options.fork = true

dependencies{
//        implementation coreModule("utils")//extra module
//        implementation coreModule("blocks")//extra module

    compileOnly arcModule("arc-core")
    compileOnly arcModule("extensions:flabel")
    compileOnly arcModule("extensions:freetype")
    compileOnly arcModule("extensions:g3d")
    compileOnly arcModule("extensions:fx")
    compileOnly arcModule("extensions:arcnet")
    compileOnly "$mindustryPath:core:$mindustryVersion"


    //you may uncomment this dependency to properly use Java 17 features while still targeting Java 8.
    //note that this fails on some systems for as-of-yet unknown reasons - if this happens to you, revert the changes
    //annotationProcessor "com.github.Anuken:jabel:$jabelVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"

}
task jarAndroid {
    dependsOn "jar"

    doLast {
        doExec = { cmd ->
            def proc = cmd.execute(null, new File("$buildDir/libs"))
            proc.waitForProcessOutput(System.out, System.err)
        }
        //collect dependencies needed for desugaring
        def files = (
                configurations.compileClasspath.asList() +
                        configurations.runtimeClasspath.asList()+
                        [new File("$sdkRoot/platforms/android-$sdkVersion/android.jar")]
        )
        def dependencies = files.collect { "--classpath $it.path" }.join(" ")

        //dex and desugar files - this requires d8 in your PATH
        doExec("d8 $dependencies --min-api 14 --output ${project.archivesBaseName}-android.jar ${project.archivesBaseName}-desktop.jar")
    }
}
jar{
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveFileName = "${project.archivesBaseName}Desktop.jar"
    from{
        configurations.runtimeClasspath.collect{ it.isDirectory() ? it : zipTree(it) }
    }

    from(rootDir){
        include "mod.hjson"
        include "mod.json"
        include "icon.png"
    }

    from("resources/assets/"){
        include "**"
    }
}
task deploy(type: Jar){
    dependsOn jarAndroid
    dependsOn jar
    archiveFileName = "${project.archivesBaseName}.jar"

    from{ [zipTree("$buildDir/libs/${project.archivesBaseName}Desktop.jar"), zipTree("$buildDir/libs/${project.archivesBaseName}Android.jar")] }

    doLast{
        delete{ delete "$buildDir/libs/${project.archivesBaseName}Desktop.jar" }
        delete{ delete "$buildDir/libs/${project.archivesBaseName}Android.jar" }
    }
}
task mjar(){
    dependsOn "jar"
    ext{
        move = { String intoPath ->
            delete{
                delete "${intoPath}/${project.archivesBaseName}Desktop.jar"
            }
            copy{
                from "$buildDir/libs/${project.archivesBaseName}Desktop.jar"
                into intoPath
            }
            println "Moved into " + intoPath
        }
    }
    doLast{
        def modsDirectories = [];
        def file = new File(rootDir, "modsDirectories.txt");
//        println "abs->"+file.getAbsolutePath();
        if(file.exists()){
            BufferedReader reader = new BufferedReader(new FileReader(file));
            reader.lines().forEach(line -> modsDirectories.add(line))
        }else{
            modsDirectories.add("classic");
        }
        for(String directory : modsDirectories){
            if (directory.startsWith("#") || directory.startsWith("//")){
                println "Directory \"$directory\" was skipped."
                continue
            }
            if(directory.equals("classic")){
                directory = "${arc.util.OS.getAppDataDirectoryString("Mindustry")}/mods/";
            }
            move(directory);
        }
        def time = LocalDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss"));
        println "Build ended at: ${time}"
    }
}

compileKotlin{
    sourceCompatibility = JavaVersion.VERSION_16
    targetCompatibility = JavaVersion.VERSION_1_8
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
allprojects{
    apply plugin: 'maven-publish'
    apply plugin: "kotlin"
    repositories{
        mavenLocal()
        google()
        mavenCentral()
        maven{ url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven{ url "https://oss.sonatype.org/content/repositories/releases/" }
        maven{ url 'https://jitpack.io' }
    }
    compileKotlin{
        sourceCompatibility = JavaVersion.VERSION_16
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    tasks.withType(JavaCompile){
        targetCompatibility = 8
        //switch to JavaVersion.VERSION_17 to use Java 17 features; this requires adding jabel (see dependencies block below)
        sourceCompatibility = 8
        options.encoding = "UTF-8"
        options.compilerArgs += ["-Xlint:deprecation"]

        options.forkOptions.jvmArgs.addAll([
                '--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
                '--add-opens=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED'
        ])
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
